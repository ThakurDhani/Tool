# SPDX-License-Identifier: MIT-0
---
# ------------------ UBUNTU/DEBIAN TASKS ------------------

- name: Check available space on /var
  shell: df --output=avail /var | tail -1
  register: disk_space_check
  changed_when: false

- name: Fail if not enough disk space on /var
  fail:
    msg: "❌ Not enough disk space on /var. At least 2 GB required."
  when: disk_space_check.stdout | int < 2097152

- name: Update apt repo and cache
  apt:
    update_cache: yes
    force_apt_get: yes
    cache_valid_time: 3600
  when: ansible_os_family == "Debian"

- name: Upgrade all packages on servers
  apt:
    upgrade: dist
    force_apt_get: yes
  when: ansible_os_family == "Debian"

- name: Install necessary packages on Debian/Ubuntu
  apt:
    name:
      - nginx
      - openjdk-17-jdk
      - vim
      - wget
    state: present
  when: ansible_os_family == "Debian"

# ------------------ ELASTICSEARCH REPO ------------------

- name: Import the Elasticsearch PGP key on Debian/Ubuntu
  apt_key:
    url: https://artifacts.elastic.co/GPG-KEY-elasticsearch
    keyring: /usr/share/keyrings/elasticsearch-keyring.gpg
    state: present
  when: ansible_os_family == "Debian"

- name: Add the Elasticsearch repository on Debian/Ubuntu
  lineinfile:
    path: /etc/apt/sources.list.d/elastic-8.x.list
    line: "deb [signed-by=/usr/share/keyrings/elasticsearch-keyring.gpg] https://artifacts.elastic.co/packages/8.x/apt stable main"
    create: yes
  when: ansible_os_family == "Debian"

# ------------------ INSTALL ELASTICSEARCH & KIBANA ------------------

- name: Install Elasticsearch & Kibana
  apt:
    name:
      - "elasticsearch={{ elasticsearch_version }}"
      - "kibana={{ kibana_version }}"
    state: present
    update_cache: yes
    allow_downgrade: yes
  notify:
    - Start Elasticsearch
    - Enable Elasticsearch
    - Restart Elasticsearch

# ------------------ CONFIGURE elasticsearch.yml ------------------

- name: Ensure /etc/elasticsearch/certs exists
  file:
    path: /etc/elasticsearch/certs
    state: directory
    owner: elasticsearch
    group: elasticsearch
    mode: '0750'

- name: Upload elasticsearch.yml
  template:
    src: elasticsearch.yml.j2
    dest: /etc/elasticsearch/elasticsearch.yml
    owner: elasticsearch
    group: elasticsearch
    mode: '0640'
  notify: Restart Elasticsearch

# ------------------ VALIDATE ELASTICSEARCH CONFIG ------------------

- name: Validate Elasticsearch configuration
  shell: "/usr/share/elasticsearch/bin/elasticsearch -Epath.conf=/etc/elasticsearch -V"
  register: es_config_check
  ignore_errors: true

- name: Fail if Elasticsearch config is invalid
  fail:
    msg: "❌ Elasticsearch config validation failed: {{ es_config_check.stderr }}"
  when: es_config_check.rc != 0

# ------------------ START ELASTICSEARCH ------------------

- name: Start Elasticsearch
  service:
    name: elasticsearch
    state: started
    enabled: yes
  register: es_service
  ignore_errors: true

- name: Fetch Elasticsearch logs if failed
  shell: journalctl -xeu elasticsearch.service | tail -n 50
  when: es_service.failed
  register: es_logs
  ignore_errors: true

- name: Display Elasticsearch logs if failed
  debug:
    msg: "{{ es_logs.stdout_lines }}"
  when: es_service.failed

- name: Fail if Elasticsearch service failed to start
  fail:
    msg: "❌ Elasticsearch failed to start. Check journalctl logs above."
  when: es_service.failed

- name: Wait for Elasticsearch to be ready
  wait_for:
    port: 9200
    host: "{{ ansible_host | default('127.0.0.1') }}"
    delay: 10
    timeout: 60

# ------------------ GENERATE KIBANA TOKEN ------------------

- name: Generate Kibana service account token
  command: "/usr/share/elasticsearch/bin/elasticsearch-service-tokens create kibana kibana"
  register: kibana_token_output
  changed_when: false
  failed_when: kibana_token_output.rc != 0 and 'already exists' not in kibana_token_output.stderr

- name: Set fact for kibana service token
  set_fact:
    kibana_service_token: "{{ kibana_token_output.stdout | trim }}"

# ------------------ CONFIGURE kibana.yml ------------------

- name: Upload kibana.yml config
  template:
    src: kibana.yml.j2
    dest: /etc/kibana/kibana.yml
    owner: kibana
    group: kibana
    mode: '0640'
  notify:
    - Restart Kibana
    - Enable Kibana
    - Start Kibana

# ------------------ START KIBANA ------------------

- name: Start Kibana
  service:
    name: kibana
    state: started
    enabled: yes
